Index: miniupnpd-2.2.0/objects.mk
===================================================================
--- miniupnpd-2.2.0.orig/objects.mk
+++ miniupnpd-2.2.0/objects.mk
@@ -3,7 +3,7 @@ BASEOBJS = miniupnpd.o upnphttp.o upnpde
            upnpredirect.o getifaddr.o daemonize.o \
            options.o upnppermissions.o minissdp.o natpmp.o pcpserver.o \
            upnpglobalvars.o upnpevents.o upnputils.o getconnstatus.o \
-           upnpstun.o upnppinhole.o pcplearndscp.o asyncsendto.o
+           upnpstun.o upnppinhole.o pcplearndscp.o asyncsendto.o upnprejected.o
 
 # sources in linux/ directory
 LNXOBJS = getifstats.o ifacewatcher.o getroute.o
Index: miniupnpd-2.2.0/upnprejected.c
===================================================================
--- /dev/null
+++ miniupnpd-2.2.0/upnprejected.c
@@ -0,0 +1,96 @@
+#include <sqlite3.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <syslog.h>
+
+char *db_path = "/usr/share/upnp_rejected.db";
+
+sqlite3 *sql_open(char *dbpath) {
+    sqlite3 *db;
+    if (sqlite3_open(dbpath, &db))
+         syslog(LOG_ERR, "Can't open database: %s" , sqlite3_errmsg(db));
+    return db;
+}
+
+int sql_close(sqlite3 *db) {
+    return sqlite3_close(db);
+}
+
+int check_if_table_exists(sqlite3 *db, char *table) {
+    int rc;
+    sqlite3_stmt *stmt;
+
+    char *sql = NULL;
+    asprintf(&sql, "SELECT COUNT(TYPE) FROM sqlite_master WHERE TYPE='table' AND NAME='%s';", table);
+
+    rc = sqlite3_prepare_v2(db, sql, -1, &stmt, NULL);
+    if (rc == SQLITE_OK) {
+ 	sqlite3_step(stmt);
+    	rc = sqlite3_column_int(stmt, 0);
+    }
+  
+    free(sql);
+    sqlite3_finalize(stmt);
+
+    return rc;
+}
+
+int create_table(sqlite3 *db, char *table) {
+    int rc;
+    char *err_msg = 0;
+    sqlite3_stmt *stmt;
+
+    char *sql = NULL;
+    asprintf(&sql, "CREATE TABLE %s (id INTEGER PRIMARY KEY AUTOINCREMENT, internal_ip TEXT NOT NULL, internal_port INTEGER NOT NULL, external_port INTEGER NOT NULL, protocol TEXT NOT NULL, error_code INTEGER NOT NULL,\ Time timestamp default (datetime('now', 'localtime')) not null);", table);
+
+    rc = sqlite3_exec(db, sql, 0, NULL, &err_msg);
+    if (rc != SQLITE_OK) {
+        syslog(LOG_ERR, "Failed to add table. %s", err_msg);
+    }
+
+    free(sql);
+    sqlite3_finalize(stmt);
+    return rc;
+}
+
+int insert_message_to_database(char *table, int eport, char *int_ip, int iport, char *protocol, int error_code) {
+    int rc;
+    char *err_msg = 0;
+
+    sqlite3 *db = sql_open(db_path);
+    sqlite3_stmt *stmt = NULL;
+
+
+    rc = check_if_table_exists(db, table);
+    if (rc == 0) {
+        syslog(LOG_INFO, "Table does not exist");
+        rc = create_table(db, table);
+        if (rc != SQLITE_OK) {
+            syslog(LOG_ERR, "Could not add table");
+            goto cleanup;
+        }
+        syslog(LOG_INFO, "Table added");
+    } else if (rc != 1) {
+         syslog(LOG_ERR, "Received error while checking for table");
+        goto cleanup;
+    } else {
+         syslog(LOG_INFO, "Table exists");
+    }
+
+    char *sql = NULL;
+
+    asprintf(&sql, "INSERT INTO %s(internal_ip, internal_port, external_port, protocol, error_code) VALUES('%s', %d, %d, '%s', %d)", table, int_ip, iport, eport, protocol, error_code);
+
+    rc = sqlite3_exec(db, sql, 0, NULL, &err_msg);
+    if (rc != SQLITE_OK) {
+         syslog(LOG_ERR, "Failed to add message. %s", err_msg);
+    }
+
+     syslog(LOG_INFO, "Message added");
+    free(sql);
+cleanup:
+    sqlite3_finalize(stmt);
+    sql_close(db);
+
+    return rc;
+}
Index: miniupnpd-2.2.0/upnprejected.h
===================================================================
--- /dev/null
+++ miniupnpd-2.2.0/upnprejected.h
@@ -0,0 +1 @@
+int insert_message_to_database(char *table, int eport, char *int_ip, int iport, char *protocol, int error_code);
Index: miniupnpd-2.2.0/upnpsoap.c
===================================================================
--- miniupnpd-2.2.0.orig/upnpsoap.c
+++ miniupnpd-2.2.0/upnpsoap.c
@@ -20,6 +20,7 @@
 #include <netdb.h>
 #include <ctype.h>
 
+#include "upnprejected.h"
 #include "macros.h"
 #include "config.h"
 #include "upnpglobalvars.h"
@@ -401,7 +402,8 @@ AddPortMapping(struct upnphttp * h, cons
 	struct hostent *hp; /* getbyhostname() */
 	char ** ptr; /* getbyhostname() */
 	struct in_addr result_ip;/*unsigned char result_ip[16];*/ /* inet_pton() */
-
+	char protocol_copy[50];
+	char ip_copy[100];
 	ParseNameValue(h->req_buf + h->req_contentoff, h->req_contentlen, &data);
 	int_ip = GetValueFromNameValueList(&data, "NewInternalClient");
 	if (int_ip) {
@@ -522,7 +524,8 @@ AddPortMapping(struct upnphttp * h, cons
 	r = upnp_redirect(r_host, eport, int_ip, iport, protocol, desc, leaseduration);
 
 	ClearNameValueList(&data);
-
+	strcpy(protocol_copy, protocol);
+	strcpy(ip_copy, int_ip);
 	/* possible error codes for AddPortMapping :
 	 * 402 - Invalid Args
 	 * 501 - Action Failed
@@ -555,17 +558,21 @@ AddPortMapping(struct upnphttp * h, cons
 	case -4:
 #ifdef IGD_V2
 		SoapError(h, 729, "ConflictWithOtherMechanisms");
+		insert_message_to_database("rejected", eport, ip_copy, iport, protocol_copy, 729);
 		break;
 #endif /* IGD_V2 */
 	case -3:	/* not permitted */
 #ifdef IGD_V2
 		SoapError(h, 606, "Action not authorized");
+		insert_message_to_database("rejected", eport, ip_copy, iport, protocol_copy, 606);
 		break;
 #endif /* IGD_V2 */
 	case -2:	/* already redirected */
 		SoapError(h, 718, "ConflictInMappingEntry");
+		insert_message_to_database("rejected", eport, ip_copy, iport, protocol_copy, 718);
 		break;
 	default:
+		insert_message_to_database("rejected", eport, ip_copy, iport, protocol_copy, 501);
 		SoapError(h, 501, "ActionFailed");
 	}
 }
